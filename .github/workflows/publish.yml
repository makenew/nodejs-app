---
name: publish

on:
  push:
    tags:
      - v*

jobs:
  npm:
    runs-on: ubuntu-20.04
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Setup Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '14'
          registry-url: https://registry.npmjs.org
      - name: Check version
        id: version
        run: |
          echo "::set-output name=name::$(jq -r '.name' package.json)"
          echo "::set-output name=current::$(jq -r '.version' package.json)"
          echo "::set-output name=published::$(npm view $(jq -r '.name' package.json)@$(jq -r '.version' package.json) version)"
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
      - name: Publish ${{ steps.version.outputs.name }}@${{ steps.version.outputs.current }}
        if: ${{ endsWith(github.ref, format('v{0}', steps.version.outputs.published)) == false }}
        run: npm publish --access public
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
  github:
    runs-on: ubuntu-20.04
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Setup Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '14'
          registry-url: https://npm.pkg.github.com
      - name: Check version
        id: version
        run: |
          echo "::set-output name=name::$(jq -r '.name' package.json)"
          echo "::set-output name=current::$(jq -r '.version' package.json)"
          echo "::set-output name=published::$(npm view $(jq -r '.name' package.json)@$(jq -r '.version' package.json) version)"
        env:
          NODE_AUTH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Publish ${{ steps.version.outputs.name }}@${{ steps.version.outputs.current }}
        if: ${{ endsWith(github.ref, format('v{0}', steps.version.outputs.published)) == false }}
        run: npm publish --access public
        env:
          NODE_AUTH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  registry:
    runs-on: ubuntu-20.04
    steps:
      - name: Get tag
        uses: jungwinter/split@v1
        id: tag
        with:
          msg: ${{ github.ref }}
          seperator: /
      - name: Get version
        uses: jungwinter/split@v1
        id: version
        with:
          msg: ${{ steps.tag.outputs._2 }}
          seperator: v
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      - name: Setup cache
        uses: actions/cache@v2
        id: cache
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ secrets.GH_USER }}
          password: ${{ secrets.GH_TOKEN }}
      - name: Build and push ${{ github.repository }}:${{ steps.version.outputs._1 }}
        uses: docker/build-push-action@v2
        with:
          push: true
          tags: ghcr.io/${{ github.repository }}:${{ steps.version.outputs._1 }}
